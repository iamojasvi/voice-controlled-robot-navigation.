import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import Twist

class VoiceNavigation(Node):
    def __init__(self):
        super().__init__('voice_navigation')
        self.subscription = self.create_subscription(String, 'voice_commands', self.command_callback, 10)
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)

    def command_callback(self, msg):
        command = msg.data.lower()
        twist = Twist()

        if "move forward" in command:
            twist.linear.x = 0.5
        elif "turn left" in command:
            twist.angular.z = 0.5
        elif "turn right" in command:
            twist.angular.z = -0.5
        elif "stop" in command:
            twist.linear.x = 0.0
            twist.angular.z = 0.0

        self.publisher_.publish(twist)
        self.get_logger().info(f"Executing: {command}")

def main(args=None):
    rclpy.init(args=args)
    node = VoiceNavigation()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
